name: macOS Build & Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to upload asset to (e.g., v1.0.2). Leave empty to skip upload.'
        required: false
        default: ''
  push:
    tags: ['v*.*.*']

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Apple Silicon
          - runner: macos-14
            arch: arm64
            dmg_suffix: arm64
          # Intel
          - runner: macos-13
            arch: x86_64
            dmg_suffix: x86_64

    runs-on: ${{ matrix.runner }}

    env:
      # Lower this if you need even older macOS, but many wheels target 10.15+.
      MACOSX_DEPLOYMENT_TARGET: "10.15"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Show env
        run: |
          sw_vers
          uname -a
          python --version

      - name: Install deps
        env:
          HOMEBREW_NO_AUTO_UPDATE: "1"
          HOMEBREW_NO_INSTALL_CLEANUP: "1"
        run: |
          python -m pip install --upgrade pip
          test -f docs/requirements.txt || (echo "Missing docs/requirements.txt"; exit 1)
          python -m pip install -r docs/requirements.txt
          python -m pip install pyinstaller
          brew install create-dmg

      - name: Build .app (PyInstaller)
        run: |
          ICON_FLAG=""
          if [ -f assets/stegocrypt.icns ]; then ICON_FLAG="--icon assets/stegocrypt.icns"; fi
          # Build native for this runner (arm64 on macos-14, x86_64 on macos-13)
          python -m PyInstaller --clean --windowed --name "StegoCrypt" ${ICON_FLAG} \
            --collect-submodules=cv2 --collect-submodules=Crypto --collect-all=PIL \
            main.py
          ls -la dist || true
          # Quick sanity: show app arch
          file "dist/StegoCrypt.app/Contents/MacOS/StegoCrypt" || true

      - name: Clean previous DMG & detach stale volumes
        run: |
          set -eux
          # Detach any previously mounted volumes that could conflict
          for v in "/Volumes/StegoCrypt" "/Volumes/StegoCrypt-${{ matrix.dmg_suffix }}" "/Volumes/StegoCrypt-${{ github.run_id }}" ; do
            if [ -d "$v" ]; then
              hdiutil detach "$v" || hdiutil detach -force "$v" || true
            fi
          done
          # Remove any existing DMG outputs
          rm -f dist/MacOS-StegoCrypt-Setup*.dmg

      - name: Create DMG (robust)
        run: |
          set -eux
          test -d "dist/StegoCrypt.app" || (echo "No .app found"; exit 1)

          echo "::group::Mounted images before"
          hdiutil info || true
          echo "::endgroup::"

          # Detach any volumes with our base name that might be lingering
          for v in /Volumes/StegoCrypt*; do
            if [ -d "$v" ]; then
              echo "Detaching stale volume: $v"
              hdiutil detach "$v" || hdiutil detach -force "$v" || true
            fi
          done

          # Clean any previous outputs in case a prior attempt left them
          rm -f "dist/MacOS-StegoCrypt-Setup-${{ matrix.dmg_suffix }}.dmg"

          VOL="StegoCrypt-${{ matrix.dmg_suffix }}-${{ github.run_id }}"
          OUT="dist/MacOS-StegoCrypt-Setup-${{ matrix.dmg_suffix }}.dmg"

          # Retry loop to dodge transient Spotlight/Gatekeeper locks
          n=0
          until create-dmg --no-internet-enable \
                 --volname "$VOL" \
                 --window-pos 200 120 --window-size 600 400 \
                 --icon-size 100 --app-drop-link 425 120 \
                 "$OUT" "dist/StegoCrypt.app"
          do
            n=$((n+1)); [ $n -ge 3 ] && exit 1
            echo "create-dmg failed; checking mounts and retrying ($n/3)â€¦"
            hdiutil info || true
            for v in /Volumes/StegoCrypt*; do
              if [ -d "$v" ]; then hdiutil detach "$v" || hdiutil detach -force "$v" || true; fi
            done
            sleep 2
          done

          ls -la dist || true

      # Upload for tag push
      - name: Upload to Release (DMG, tag push)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/MacOS-StegoCrypt-Setup-${{ matrix.dmg_suffix }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload for manual run with input tag
      - name: Upload to Release (DMG, manual with input tag)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.release_tag != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag }}
          files: dist/MacOS-StegoCrypt-Setup-${{ matrix.dmg_suffix }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Always keep artifacts for debugging
      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-artifacts
          path: |
            dist/**
            build/**
            *.spec
          if-no-files-found: warn
